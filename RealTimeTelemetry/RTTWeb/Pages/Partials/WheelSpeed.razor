@using RTTWeb.Data
@using RTTWeb.Data.ViewModels
@using Models

@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Charts

@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.Util

<ChartJs.Blazor.Charts.ChartJsLineChart @ref="_chart" Config="_config" Width="1200" Height="300" />

@code {
    [Parameter]
    public WheelSpeedVM wheelSpeedVM { get; set; }
    private int num = 0;
    private LineConfig _config;
    private ChartJsLineChart _chart;
    LineDataset<TimeTuple<int>> _frDataSet;
    LineDataset<TimeTuple<int>> _flDataSet;
    LineDataset<TimeTuple<int>> _rrDataSet;
    LineDataset<TimeTuple<int>> _rlDataSet;

    protected override void OnInitialized()
    {
        _config = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Wheel Speed"
                },
                Legend = new Legend
                {
                    Position = Position.Right,
                    Labels = new LegendLabelConfiguration
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
{
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Millisecond,
                                Round = TimeMeasurement.Millisecond,
                                TooltipFormat = "DD.MM.YYYY HH:mm:ss:SSS",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Time"
                            }
                        }
                    }
                },
                Hover = new LineOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        _frDataSet = new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.RandomColorString(),
            BorderColor = ColorUtil.RandomColorString(),
            Label = "FR",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };
        _flDataSet = new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.RandomColorString(),
            BorderColor = ColorUtil.RandomColorString(),
            Label = "FL",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };
        _rrDataSet = new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.RandomColorString(),
            BorderColor = ColorUtil.RandomColorString(),
            Label = "RR",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };
        _rlDataSet = new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.RandomColorString(),
            BorderColor = ColorUtil.RandomColorString(),
            Label = "RL",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };



        _config.Data.Datasets.Add(_frDataSet);
        _config.Data.Datasets.Add(_flDataSet);
        _config.Data.Datasets.Add(_rrDataSet);
        _config.Data.Datasets.Add(_rlDataSet);

        // ...

        wheelSpeedVM.WheelSpeedUpdated += OnModelChange;
        base.OnInitialized();
    }

    public async void OnModelChange(object sender, Models.WheelSpeed newWheelSpeed)
    {
        if (newWheelSpeed == null)
        {
            return;
        }
        if (_frDataSet.Data.Count > 30)
        {
            _frDataSet.RemoveAt(0);
            _flDataSet.RemoveAt(0);
            _rrDataSet.RemoveAt(0);
            _rlDataSet.RemoveAt(0);
        }
        _frDataSet.Add(new TimeTuple<int>(new Moment(newWheelSpeed.TimeStamp), (int)newWheelSpeed.FrontPassenger));
        _flDataSet.Add(new TimeTuple<int>(new Moment(newWheelSpeed.TimeStamp), (int)newWheelSpeed.FrontDriver));
        _rrDataSet.Add(new TimeTuple<int>(new Moment(newWheelSpeed.TimeStamp), (int)newWheelSpeed.RearPassenger));
        _rlDataSet.Add(new TimeTuple<int>(new Moment(newWheelSpeed.TimeStamp), (int)newWheelSpeed.RearDriver));

        // Update the UI
        await InvokeAsync(() => StateHasChanged());
    }
}
