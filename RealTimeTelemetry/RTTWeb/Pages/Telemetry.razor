@page "/telemetry"

@using RTTWeb.Data

@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Charts

@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.Util

@inject TelemetryService telem

<ChartJs.Blazor.Charts.ChartJsLineChart @ref="_chart" Config="_config" Width="600" Height="300" />

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int num = 0;
    private LineConfig _config;
    private ChartJsLineChart _chart;
    LineDataset<TimeTuple<int>> _tempDataSet;

    protected override void OnInitialized()
    {
        _config = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Line Chart"
                },
                Legend = new Legend
                {
                    Position = Position.Right,
                    Labels = new LegendLabelConfiguration
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
                {
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Millisecond,
                                Round = TimeMeasurement.Millisecond,
                                TooltipFormat = "DD.MM.YYYY HH:mm:ss:SSS",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Time"
                            }
                        }
                    }
                },
                Hover = new LineOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        _tempDataSet = new LineDataset<TimeTuple<int>>
        {
            BackgroundColor = ColorUtil.RandomColorString(),
            BorderColor = ColorUtil.RandomColorString(),
            Label = "RPM",
            Fill = false,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };



        _config.Data.Datasets.Add(_tempDataSet);

        // ...

        telem.telemetry.EngineTemperatureChanged += OnModelChange;
        base.OnInitialized();
    }

    public async void OnModelChange()
    {
        if (_tempDataSet.Data.Count > 10)
        {
            _tempDataSet.RemoveAt(0);
        }
        _tempDataSet.Add(new TimeTuple<int>(new Moment(DateTime.Now), (int)telem.telemetry.VehicleRPM.RPM));

        // Update the UI
        this.StateHasChanged();
        await _chart.Update();
    }
    private async void IncrementCount()
    {
        num++;
        if (_tempDataSet.Data.Count > 10)
        {
            _tempDataSet.RemoveAt(0);
        }
        _tempDataSet.Add(new TimeTuple<int>(new Moment(DateTime.Now), (int)telem.telemetry.VehicleRPM.RPM));

        // Update the UI
        this.StateHasChanged();
        await _chart.Update();
    }
}
